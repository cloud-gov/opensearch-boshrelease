#!/var/vcap/packages/python3-requests/venv/bin/python3

<%

  job_dir = "/var/vcap/jobs/upload-dashboards-objects"

  system_domain = nil
  if_p('cloudfoundry.system_domain') do |prop|
    system_domain = prop
  end.else do
    system_domain = link('cloud_controller').p('system_domain')
  end
  logs_hostname = "logs"
  if_p('cloudfoundry.logs_hostname') do |prop|
    logs_hostname = prop
  end

  dashboards_link = link('opensearch_dashboards')
%>

import glob
import logging
import os
import requests

logging.basicConfig(level=logging.INFO)

if __name__ == "__main__":
    session = requests.Session()

    # set CA
    ca =  '<%= job_dir %>/config/ssl/opensearch.ca'
    cert = '<%= job_dir %>/config/ssl/dashboard-web.crt'
    key = '<%= job_dir %>/config/ssl/dashboard-web.key'

    logs_url = 'https://<%= p('opensearch_dashboards.host') %>:<%= dashboards_link.p('opensearch_dashboards.port') %>'
    login_url = 'https://<%= p("dashboards_objects.login_host_name") %>.<%= system_domain %>'

    logs = session.get(login_url)
    assert logs.url == 'https://login.<%= system_domain %>/login', logs.url
    assert logs.status_code == 200, logs.status_code

    login = session.post(
        'https://<%= p("dashboards_objects.login_host_name") %>.<%= system_domain %>/login.do',
        data={
            'username': '<%= p('cloudfoundry.user') %>',
            'password': '<%= p('cloudfoundry.password') %>',
            'X-Uaa-Csrf': logs.cookies['X-Uaa-Csrf'],
        },
    )
    assert login.url == f'{logs_url}/app/home', login.url
    assert login.status_code == 200, login.status_code
    
    <% p("dashboards_objects.upload_patterns").each do |pattern| %>
    for filename in glob.iglob("<%= pattern.fetch("pattern") %>", recursive=True):
        headers = {'content-type': 'application/json', 'osd-xsrf': 'true'}
        r = session.post(
          '{}/api/saved_objects/{}/{}'.format(
            logs_url,
            os.path.basename(os.path.dirname(filename)),
            os.path.basename(os.path.splitext(filename)[0])
          ),
          data=open(filename, 'rb'),
          headers=headers,
          cert=(cert, key),
          verify=ca
        )
        if r.status_code == 409:
            put = session.put(
              '{}/api/saved_objects/{}/{}'.format(
                logs_url,
                os.path.basename(os.path.dirname(filename)),
                os.path.basename(os.path.splitext(filename)[0])
              ),
              data=open(filename, 'rb'),
              headers=headers,
              cert=(cert, key),
              verify=ca
            )
            if put.status_code == 200:
                logging.info('Object %s Uploaded Successfully', filename)
            else:
                logging.info('Object %s Failed to Upload', filename)
        elif r.status_code == 200:
            logging.info('Object %s Uploaded Successfully', filename)
        else:
            logging.info('Object %s Failed to Upload', filename)
    <% end %>

    r = session.post(
      '{}/api/opensearch-dashboards/settings'.format(logs_url),
      data='{"changes":{"defaultIndex":"<%= p('dashboards_objects.default_index') %>"}}',
      headers=headers,
      cert=(cert, key),
      verify=ca
    )
    if r.status_code == 200:
        logging.info('Successfully Set <%= p('dashboards_objects.default_index') %> as Default Index')
    else:
        logging.info('Failed to Set <%= p('dashboards_objects.default_index') %> as Default Index')
