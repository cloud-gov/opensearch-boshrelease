#!/usr/bin/env bash

export JOB_NAME=opensearch
export OPENSEARCH_HOME=/var/vcap/packages/opensearch
export JOB_DIR=/var/vcap/jobs/$JOB_NAME
export OPENSEARCH_PATH_CONF=${JOB_DIR}/config
export OPENSEARCH_SECURITY_CONFIG_PATH=${OPENSEARCH_PATH_CONF}/opensearch-security
export YQ_PACKAGE_DIR=/var/vcap/packages/yq
export PATH=$YQ_PACKAGE_DIR/bin:$PATH
export PATH=/var/vcap/packages/cf-cli-8-linux/bin:$PATH

export KEYSTORE="/var/vcap/packages/openjdk-21/lib/security/cacerts"
STOREPASS=<%= p("opensearch.notification.keystorepass") %>
DEFAULTPASS=<%= p("opensearch.notification.defaultkeystorepass") %>

/var/vcap/packages/openjdk-21/bin/keytool -storepasswd -new $STOREPASS -cacerts -storepass "$DEFAULTPASS" > /dev/null 2>&1;

delete_alias_if_exists(){
    local alias=$1
    if /var/vcap/packages/openjdk-21/bin/keytool -list -cacerts -storepass "$STOREPASS" | grep -q "$alias";then
       /var/vcap/packages/openjdk-21/bin/keytool -delete -alias "$alias" -cacerts -storepass "$STOREPASS"
    fi
}
delete_alias_if_exists "smtp-ca"
/var/vcap/packages/openjdk-21/bin/keytool -importcert -file ${JOB_DIR}/config/ssl/smtp.ca -storepass "$STOREPASS" -alias smtp-ca -trustcacerts -cacerts -noprompt
delete_alias_if_exists "smtp-crt"
/var/vcap/packages/openjdk-21/bin/keytool -importcert -file ${JOB_DIR}/config/ssl/smtp.crt -storepass "$STOREPASS" -alias smtp-crt -trustcacerts -cacerts -noprompt

sysctl -q -w vm.max_map_count=262144
mkdir -p ${OPENSEARCH_HOME}/plugins
if [ -d ${JOB_DIR}/config/ssl ]; then
	chown vcap ${JOB_DIR}/config/ssl
fi

source /var/vcap/packages/openjdk-21/bosh/runtime.env

# Copy default security config if it doesn't already exist
# Have to copy files that don't exist otherwise securityadmin.sh invocation will fail
cp -u ${OPENSEARCH_HOME}/config/opensearch-security/*.yml "$OPENSEARCH_SECURITY_CONFIG_PATH"

cd ${OPENSEARCH_HOME}
chown -R vcap:vcap config plugins
chown -R vcap:vcap "$OPENSEARCH_SECURITY_CONFIG_PATH"

<% if_p('opensearch.cf.domain', 'opensearch.cf.client_id', 'opensearch.cf.client_password') do %>
<% if p("opensearch.node.allow_data") %>
<%
  api = p("opensearch.cf.domain")
  client = p("opensearch.cf.client_id")
  password = p("opensearch.cf.client_password")
%>
cf api "<%= api %>"
cf auth "<%= client %>" "<%= password %>" --client-credentials
# Prepare tenants, roles, and role mappings so that they don't get overridden by securityadmin.sh
# script invocation in post-start
ORG_GUID_LIST=()
for org in $(cf orgs | tail -n +4); do
  ORG_GUID=$(cf org "$org" --guid)
  ROLE_NAME="$org-tenant"
  ORG_GUID_LIST+=("\"$ORG_GUID\"")
  yq -i ".\"$org\"={\"description\":\"tenant for $org\"}" "$OPENSEARCH_SECURITY_CONFIG_PATH/tenants.yml"
  yq -i ".\"$ROLE_NAME\"={\"tenant_permissions\":[{\"tenant_patterns\":[\"$org\"],\"allowed_actions\":[\"kibana_all_write\"]}]}" "$OPENSEARCH_SECURITY_CONFIG_PATH/roles.yml"
  yq -i ".\"$ROLE_NAME\"={\"backend_roles\": [\"$ORG_GUID\"]}" "$OPENSEARCH_SECURITY_CONFIG_PATH/roles_mapping.yml"
done

# this makes a list of cf org guids and assigns them to roles, making users with a org have access to the following roles.
ORG_GUID_ROLE_LIST=$(IFS=,; echo "${ORG_GUID_LIST[*]}")
yq -i ".cf_user={\"backend_roles\": [$ORG_GUID_ROLE_LIST]}" "$OPENSEARCH_SECURITY_CONFIG_PATH/roles_mapping.yml"
yq -i ".reports_full_access={\"backend_roles\": [$ORG_GUID_ROLE_LIST]}" "$OPENSEARCH_SECURITY_CONFIG_PATH/roles_mapping.yml"
yq -i ".alerting_full_access={\"backend_roles\": [$ORG_GUID_ROLE_LIST]}" "$OPENSEARCH_SECURITY_CONFIG_PATH/roles_mapping.yml"
yq -i ".notifications_full_access={\"backend_roles\": [$ORG_GUID_ROLE_LIST]}" "$OPENSEARCH_SECURITY_CONFIG_PATH/roles_mapping.yml"
<% end %>
<% end %>

# leaving all plugin files and plugins installed for now
# can revisit https://opensearch.org/docs/latest/install-and-configure/plugins/ for how to
# allow installing specific plugins

# see https://opensearch.org/docs/latest/tuning-your-cluster/availability-and-recovery/snapshots/snapshot-restore/#amazon-s3
<% if_p('opensearch.repository.s3.access_key', 'opensearch.repository.s3.secret_key') do %>
  ${OPENSEARCH_HOME}/bin/opensearch-plugin install -b repository-s3

  echo '<%= p('opensearch.repository.s3.access_key') %>' \
    | ${OPENSEARCH_HOME}/bin/opensearch-keystore add --stdin s3.client.default.access_key
  echo '<%= p('opensearch.repository.s3.secret_key') %>' \
    | ${OPENSEARCH_HOME}/bin/opensearch-keystore add --stdin s3.client.default.secret_key
<% end %>
<% p("opensearch.plugins").each do |plugin| name, path = plugin.first %>
  <% if path.start_with? '/var/vcap' %>
    ${OPENSEARCH_HOME}/bin/opensearch-plugin install -b "file://<%= path %>"
  <% elsif path.start_with? 'http' %>
    ${OPENSEARCH_HOME}/bin/opensearch-plugin install -b "<%= path %>"
  <% else %>
    ${OPENSEARCH_HOME}/bin/opensearch-plugin install -b "<%= path %>"
  <% end %>
<% end %>

log_dir=${OPENSEARCH_HOME}/logs

if [[ -d ${log_dir} ]]; then
  # rmdir fails on a symlink
  rmdir ${log_dir} || rm ${log_dir}
fi

if [[ ! -a ${log_dir} ]]; then
  ln -s /var/vcap/sys/log/opensearch ${log_dir}
fi
