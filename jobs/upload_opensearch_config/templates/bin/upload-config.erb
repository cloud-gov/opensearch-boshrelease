#!/bin/bash

set -ex
export JOB_NAME=upload_opensearch_config
export JOB_DIR=/var/vcap/jobs/$JOB_NAME
export DATA_DIR=/var/vcap/data/$JOB_NAME
<%
opensearch_host = p("opensearch_config.opensearch.host")
opensearch_port = p("opensearch_config.opensearch.port")
document_size = p("opensearch_config.rollover_document_size")
index_age = p("opensearch_config.rollover_index_age")
aliases = p("opensearch_config.alias")
%>

# Delete existing templates before uploading
URL=https://<%= opensearch_host %>:<%= opensearch_port %>
BASEURL=https://<%= opensearch_host %>:<%= opensearch_port %>
CA="--cacert ${JOB_DIR}/config/ssl/opensearch.ca"
CERT="--cert ${JOB_DIR}/config/ssl/opensearch-admin.crt"
KEY="--key ${JOB_DIR}/config/ssl/opensearch-admin.key"
DOCUMENT_SIZE=<%= document_size %>
INDEX_AGE=<%= index_age %>
ALIAS=<%= aliases %>


for template in $(curl -s ${CA} ${CERT} ${KEY} ${URL}/_cat/templates | awk '{print $1}'); do
  if ! grep -qw ${template} <(echo "<%= p('opensearch_config.index_templates').map { |template| template.keys.first }.join(' ') %>"); then
    # hit template and index_template so we can try for legacy and component templates
    curl -s -XDELETE ${CA} ${CERT} ${KEY} ${URL}/_template/${template}
    curl -s -XDELETE ${CA} ${CERT} ${KEY} ${URL}/_index_template/${template}
  fi
done

<%
require 'uri'

def put_to_es(url_stem_base, es_config, request_params = {})
  ret = []
  es_config = Array(es_config)
  es_config.each do |config|
    if config.is_a? Hash
      ckey, content = config.to_a.first
    else
      ckey = ''
      content = config
    end

    if url_stem_base == ''
      url_stem = "#{ckey}".chomp('/')
    else
      url_stem = "#{url_stem_base}/#{ckey}".chomp('/')
    end

    if request_params.keys.any?
      params = URI.encode_www_form(request_params)
      url_stem << "?#{params}"
    end

    opensearch_host = p("opensearch_config.opensearch.host")
    opensearch_port = p("opensearch_config.opensearch.port")

    ret << "URL=https://#{opensearch_host}:#{opensearch_port}/#{url_stem}"
    if nil == content
     ret << 'curl -X DELETE ${CA} ${CERT} ${KEY} "${URL}"'
    else
      if content.start_with? '/var/vcap'
        ret << "CONTENT_PATH=\"#{content}\""
      else
        ret << <<BASH
CONTENT_PATH=${DATA_DIR}/opensearch_config-http_body.txt
cat <<EOF > ${CONTENT_PATH}
#{content}
EOF
BASH
      end

      ret << <<BASH
HTTP_CODE=$(curl -s -H 'Content-Type: application/json' -w '%{http_code}' -o ${DATA_DIR}/opensearch_config-response.txt -X PUT --data-binary @$CONTENT_PATH  ${CA} ${CERT} ${KEY} ${URL})

if grep --quiet "\"errors\":true" ${DATA_DIR}/opensearch_config-response.txt ; then
  cat ${DATA_DIR}/opensearch_config-response.txt >> /dev/stderr
  exit $HTTP_CODE
fi

if [ "$HTTP_CODE" -le "300" ]; then
  cat ${DATA_DIR}/opensearch_config-response.txt
else
  cat ${DATA_DIR}/opensearch_config-response.txt >> /dev/stderr
  exit $HTTP_CODE
fi
BASH
    end
  end #loop
  ret.join("\n")
end
%>

#
# wait for opensearch availability
#

until curl -f ${KEY} ${CERT} ${CA} "${URL}/_cluster/health?wait_for_status=yellow&timeout=10m"; do :; done

echo "--- Component Templates"
<%= put_to_es('_component_template', p('opensearch_config.component_templates')) %>

echo "--- Index Templates"
<%= put_to_es('_index_template', p('opensearch_config.index_templates')) %>

echo "--- Documents"
<%= put_to_es('', p('opensearch_config.docs')) %>

echo "--- License"
<% if_p("opensearch_config.license") do |license| %>
  <%= put_to_es('_license', license, acknowledge: true) %>
<% end %>

echo "--- Creating ISM policy"

logs-app-rollover_policy=$(curl -XGET ${CA} ${CERT} ${KEY} ${BASEURL}/_plugins/_ism/policies/logs-app-rollover_policy)
TERM=$(echo "$logs-app-rollover_policy" | grep -o '"_primary_term":[0-9]*' | sed 's/"_primary_term"://')
SEQ=$(echo "$logs-app-rollover_policy" | grep -o '"_seq_no":[0-9]*' | sed 's/"_seq_no"://')
if [[ -n "$TERM" ]]; then
  curl -XPUT ${CA} ${CERT} ${KEY} "${BASEURL}/_plugins/_ism/policies/logs-app-rollover_policy?if_seq_no=${SEQ}&if_primary_term=${TERM}" -H 'Content-Type: application/json' -d'{"policy":{"description":"Rollover to a new index when age or size becomes our target","default_state":"Rollover","states":[{"name":"Rollover","actions":[{"retry":{"count":3,"backoff":"exponential","delay":"1m"},"rollover":{"min_index_age":"1d","min_primary_shard_size":"3gb","copy_alias":false}},{"retry":{"count":3,"backoff":"exponential","delay":"1m"},"read_only":{}}],"transitions":[{"state_name":"Merged_index","conditions":{"min_index_age":"30d"}}]},{"name":"Merged_index","actions":[{"retry":{"count":3,"backoff":"exponential","delay":"1m"},"force_merge":{"max_num_segments":1}}],"transitions":[{"state_name":"Old_index","conditions":{"min_index_age":"90d"}}]},{"name":"Old_index","actions":[{"retry":{"count":3,"backoff":"exponential","delay":"1m"},"allocation":{"require":{"box_type":"warm"},"include":{},"exclude":{},"wait_for":false}}],"transitions":[{"state_name":"Delete_index","conditions":{"min_index_age":"365d"}}]},{"name":"Delete_index","actions":[{"retry":{"count":3,"backoff":"exponential","delay":"1m"},"delete":{}}],"transitions":[]}],"ism_template":[{"index_patterns":["logs-app-*"],"priority":100}]}}'
else
  curl -XPUT ${CA} ${CERT} ${KEY} ${BASEURL}/_plugins/_ism/policies/logs-app-rollover_policy -H 'Content-Type: application/json' -d'{"policy":{"description":"Rollover to a new index when age or size becomes our target","default_state":"Rollover","states":[{"name":"Rollover","actions":[{"retry":{"count":3,"backoff":"exponential","delay":"1m"},"rollover":{"min_index_age":"1d","min_primary_shard_size":"3gb","copy_alias":false}},{"retry":{"count":3,"backoff":"exponential","delay":"1m"},"read_only":{}}],"transitions":[{"state_name":"Merged_index","conditions":{"min_index_age":"30d"}}]},{"name":"Merged_index","actions":[{"retry":{"count":3,"backoff":"exponential","delay":"1m"},"force_merge":{"max_num_segments":1}}],"transitions":[{"state_name":"Old_index","conditions":{"min_index_age":"90d"}}]},{"name":"Old_index","actions":[{"retry":{"count":3,"backoff":"exponential","delay":"1m"},"allocation":{"require":{"box_type":"warm"},"include":{},"exclude":{},"wait_for":false}}],"transitions":[{"state_name":"Delete_index","conditions":{"min_index_age":"365d"}}]},{"name":"Delete_index","actions":[{"retry":{"count":3,"backoff":"exponential","delay":"1m"},"delete":{}}],"transitions":[]}],"ism_template":[{"index_patterns":["logs-app-*"],"priority":100}]}}'
fi

HTTP_CODE=$(curl -s -o /dev/null -s -w "%{http_code}\n" -I  ${CA} ${CERT} ${KEY} ${BASEURL}/_alias/${ALIAS}/ )
if [ "$HTTP_CODE" -ge "201" ]; then
  curl -XPUT ${CA} ${CERT} ${KEY} ${BASEURL}/%3Clogs-app-%7Bnow%2Fd%7D-01%3E -H 'Content-Type: application/json' -d'{"aliases": {"'${ALIAS}'": {}}}'
fi

echo "--- Creating Reporting indexs"

curl -XGET ${CA} ${CERT} ${KEY} ${BASEURL}/_plugins/_reports/definitions
curl -XGET  ${CA} ${CERT} ${KEY} ${BASEURL}/_plugins/_reports/instances