
# # gunzip
# ruby {
#     code => "
#     require 'zlib'
#     require 'stringio'
#     begin
#         gz = Zlib::GzipReader.new(StringIO.new(event.get('message').to_s.b))
#         decompressed = gz.read
#         gz.close
#         event.set('message', decompressed)
#     rescue => e
#         event.tag('gzip_failed')
#         event.set('gzip_error', e.message)
#     end
#     "
# }

# base64 decode
# ruby {
#     code => "
#     require 'base64'
#     begin
#         decoded = Base64.decode64(event.get('message'))
#         event.set('message',decoded)
#     rescue => e
#         event.tag('base64_decode_failed')
#         event.set('decoded_error', e.message)
#     end
#     "
# }






json
{
    source => "message"
    tag_on_failure => ["_jsonparsefailure"]
}

date
{
match => ["timestamp", "ISO8601"]
target => "@timestamp"
}

mutate
{
add_field => {"@type" => "metrics"}
rename => {"[Tags][Organization GUID]"=>"[@cf][org_id]"}
rename => {"[Tags][Organization name]"=>"[@cf][org]"}
rename => {"[Tags][Space GUID]"=>"[@cf][space_id]"}
rename => {"[Tags][Space name]"=>"[@cf][space]"}
rename => {"[Tags][Service plan name]"=>"[@cf][service_plan]"}
rename => {"[Tags][Plan GUID]"=>"[@cf][plan_id]"}
rename => {"[Tags][Service GUID]"=>"[@cf][service_instance_id]"}
rename => {"[Tags][service]"=>"[@cf][service]"}
rename => {"[Tags][Service offering name]"=>"[@cf][service_offering]"}
rename => {"[Tags][Instance GUID]"=>"[@cf][instance_id]"}
rename => {"[Tags][Instance name]"=>"[@cf][instance]"}

rename => {"[Tags][Created at]" => "[created at]"}
rename => {"[Tags][broker]"=>"[broker]"}
rename => {"[Tags][environment]"=>"environment"}
rename => {"[dimensions][DomainName]"=>"[metric][domain_name]"}
rename => {"[dimensions][NodeId]"=>"[metric][node_id]"}
rename => {"[InstanceName]"=>"[metric][instance_id]"}
rename => {"[MetricName]"=>"[metric][name]"}
rename => {"[value][sum]"=>"[metric][sum]"}
rename => {"[value][max]"=>"[metric][max]"}
rename => {"[value][min]"=>"[metric][min]"}
rename => {"[value][count]"=>"[metric][count]"}

rename => {"[unit]"=>"[metric][unit]"}
remove_field => ["[Tags][client]"]
}

ruby {
  code => "
  if event.get('[metric][sum]') && event.get('[metric][count]')
    sum = event.get('[metric][sum]').to_f
    count = event.get('[metric][count]').to_f
    event.set('[metric][average]', sum / count) if count !=0
  end
  "
}